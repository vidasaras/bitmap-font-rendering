Bitmap Font Renderer (BFR)
==========================

This is a minimal bitmap font rendering library using SDL.
(This is a "trust-user" implementation. So, no error handling.)

Usage:
------
1. Define `BFR_IMPLEMENTATION` in *one* source file before including `bfr.h`:

   #define BFR_IMPLEMENTATION
   #include "bfr.h"

2. Configure and initialize with `bfr_init()` using a `Font_config` struct.

3. Load the font texture using `load_font_image(renderer, "font.png", &ptr)`.

4. Load ASCII values using `load_ascii("input", syntaxValid)`.

5. Use `render_ch()`, `render_line()`, or `render_lines()` to draw text using `Font_Render_Params` struct.

6. Call `bfr_destroy()` when done.

Files:
------
- `bfr.h`: Main header and implementation (define `BFR_IMPLEMENTATION` in one `.c` file).
- `font.png`: Bitmap font image (user-provided).
- `input`: ASCII codes for characters in font image (newline-separated integers).

Definition:
-----------
struct Font_config {
    int ch_w;        // Width of each character in pixels
    int ch_h;        // Height of each character in pixels
    int margin_x;    // Left margin of character grid in texture
    int margin_y;    // Top margin of character grid in texture
    int ch_sp;       // Horizontal spacing between characters in texture
    int line_sp;     // Vertical spacing between lines in texture
    int ch_line;     // Number of characters per line in the texture
    int nm_line;     // Total number of lines in the texture
    int nm_ch;       // Total number of characters (used to allocate ASCII table)
}; // Struct for holding data to load characters from the font.png

struct Font_Render_Params {
  int dst_x, dst_y,                     // destination x and y
      margin_x, margin_y,               // margin around the text
      text_padding_ch, text_padding_ln, // padding between characters and lines
      scale_w, scale_h,                 // scale of characters in width and height
      line_width;                       // character length for line wrapping (unimplemented)
}; // Struct for holding data to render text


Functions:
----------

1. int bfr_init(Font_config conf)
   - Initializes internal font configuration using the provided settings.
   - Must be called before rendering.
   - Returns 0 on success.

2. void bfr_destroy()
   - Frees internal memory used for font configuration and ASCII table.

3. int load_font_image(SDL_Renderer* renderer, char* file, &ptr)
  - Load a font texture from file and set it to blend mode.
  - ptr is a pointer to a `SDL_Texture`.
  - Returns 0 on success, 1 on failure.

4. void load_ascii(char* file, int syntaxValid)
   - Loads ASCII codepoints from a plain text file.

   if syntaxValid = 0 then
    - Each line should contain a single integer (ASCII value).
    - Total lines should match `nm_ch` in configuration.

   if syntaxValid = 1 then
    Each line should contain a couplet of integers in the following format.
        Index starting point : ASCII value for that starting index
    The programme will store the ASCII values as (index++:ASCII++) til it is said
    to stop in the next line's Index starting point.
    ex:
        1:65
        27:97
        53:0
    This will store from 1:A(65) to 26:Z(whatever ascii it is from 65) and
    27:a(97) to 52:z(...). a placeholder of 53 which tells the starting index
    27 to stop at index 52 is needed otherwise sth happens (Im too lazy to find out).
    You can change how many steps it takes from one ASCII value to other.
    ex:
        63:43x2
        65:...
        ...
    This will store 63:+(43) to 64:-(45) .
    you can put one index per one ASCII as well here (but whats the point,
    make your font png organized in a way that is easy to index by the ASCII values).
    ex:
        88:32
        89:0 (optional if the nm_ch=88)
    This will store 88:$(32) .

5. void render_ch(SDL_Renderer* renderer, SDL_Texture* font_texture, char ch, int ch_in_line_i, int line_i, Font_Render_Params* params)
   - Renders a single character `ch` using its lookup index.
   - `ch_in_line_i` is the horizontal index in the text.
   - `line_i` is the vertical line index.

6. void render_line(SDL_Renderer* renderer, SDL_Texture* font_texture, char* ch, int line_i, Font_Render_Params* params)
   - Renders a full line of text `ch` at line index `line_i`.

7. void render_lines(SDL_Renderer* renderer, SDL_Texture* font_texture, char* ch, Font_Render_Params* params)
   - Renders multiple lines of text split by newline (`\n`) characters.

Dependencies:
-------------
- SDL2
- SDL2_image

Notes:
------
- Ensure that `font.png` and ASCII input file are available before rendering.
- Call `SDL_RenderPresent()` after rendering.
- Always call `bfr_destroy()` before quitting.
